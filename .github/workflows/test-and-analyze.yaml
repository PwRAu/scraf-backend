name: Test and analyze

on:
  push:
    branches: [ main ]
    paths-ignore:
      - docs
      - '**.md'
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '45 10 * * 5'

env:
  CODECOV_TOKEN: 7fe99389-2dd9-40d0-a3e9-042f23a54307

jobs:
  test-and-analyze:
    name: Test and analyze
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Install dependencies
      run: |
        sudo rm -r /etc/apt/*sources.list*
        sudo mkdir /etc/apt/sources.list.d
        printf "Enabled: yes\nTypes: deb\nURIs: http://azure.archive.ubuntu.com/ubuntu/\nSuites: focal focal-updates focal-backports focal-security hirsute\nComponents: main universe multiverse restricted\n" | sudo tee /etc/apt/sources.list.d/system.sources
        printf "APT::Default-Release \"focal\";\n" | sudo tee /etc/apt/apt.conf.d/00default-release
        sudo apt-get -qq update && sudo apt-get -qq install --assume-yes meson/hirsute gcc-10-plugin-dev libgtest-dev libsimdjson-dev/hirsute nlohmann-json3-dev libsodium-dev libcurl4-openssl-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10

    - name: build2 cache
      id: build2-cache
      uses: actions/cache@v2
      with:
        path: ~/build2
        key: ${{runner.os}}-build2

    - name: Install build2
      if: steps.build2-cache.outputs.cache-hit != 'true'
      run: |
        mkdir build2-build && cd build2-build
        curl -sSfO https://download.build2.org/0.13.0/build2-install-0.13.0.sh 
        sh build2-install-0.13.0.sh --yes --no-check --trust yes ~/build2

    - name: Install odb
      run: |
        export PATH=$HOME/build2/bin:$PATH
        mkdir odb-build && cd odb-build
        bpkg create --directory odb-gcc-10 cc config.cxx=g++ config.cc.coptions=-O3 config.bin.rpath=/usr/local/lib config.install.root=/usr/local config.install.sudo=sudo --quiet
        cd odb-gcc-10
        yes | bpkg build odb@https://pkg.cppget.org/1/beta --trust-yes --quiet
        bpkg test odb
        bpkg install odb --quiet
        cd ..
        bpkg create --directory gcc-10 cc config.cxx=g++ config.cc.coptions=-O3 config.install.root=/usr/local config.install.sudo=sudo --quiet
        cd gcc-10
        bpkg add https://pkg.cppget.org/1/beta --trust-yes --quiet
        bpkg fetch --trust-yes --quiet
        yes | bpkg build libodb --trust-yes --quiet
        yes | bpkg build libodb-pgsql --trust-yes --quiet
        bpkg install --all --recursive --quiet

    - name: Build release
      run: |
        meson setup build_release --buildtype=release
        meson compile -C build_release

    - name: Build debug
      run: |
        meson setup build_debug --buildtype=debug -Db_coverage=true
        meson compile -C build_debug

    - name: Test release
      run: |
        meson test -C build_release || cat build_release/meson-logs/testlog.txt
      continue-on-error: true

    - name: Test debug
      run: |
        meson test -C build_debug
        cat build_debug/meson-logs/testlog.txt
        bash <(curl --silent https://codecov.io/bash) -X coveragepy -X xcode -g subprojects
      continue-on-error: true

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
