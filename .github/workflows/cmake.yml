name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Checkout submodules
      run: git submodule update --init --recursive
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install --assume-yes libpq-dev gcc-9-plugin-dev
    
    - name: Install build2
      run: mkdir build2-build && cd build2-build && curl -sSfO https://download.build2.org/0.13.0/build2-install-0.13.0.sh && sh build2-install-0.13.0.sh --yes --no-check --trust yes
    
    - name: Install odb
      run: mkdir odb-build && cd odb-build && bpkg create --directory odb-gcc-9 cc config.cxx=g++ config.cc.coptions=-O3 config.bin.rpath=/usr/local/lib config.install.root=/usr/local config.install.sudo=sudo --trust-yes && cd odb-gcc-9 && (yes | bpkg build odb@https://pkg.cppget.org/1/beta --trust-yes) && bpkg test odb && bpkg install odb --trust-yes && cd .. && bpkg create --directory gcc-9 cc config.cxx=g++ config.cc.coptions=-O3 config.install.root=/usr/local config.install.sudo=sudo && cd gcc-9 && bpkg add https://pkg.cppget.org/1/beta --trust-yes && (yes | bpkg fetch --trust-yes) && (yes | bpkg build libodb --trust-yes) && (yes | bpkg build libodb-pgsql --trust-yes) && (yes | bpkg install --trust-yes --all --recursive)

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
    - name: Store compiled program
      uses: actions/upload-artifact@v2
      with: 
        name: scraf-backend-main
        path: ${{runner.workspace}}/build/Scraf
